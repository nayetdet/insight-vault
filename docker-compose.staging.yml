services:
  backend:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: insightvault-backend
    ports:
      - "8080:8080"
    depends_on:
      postgres:
        condition: service_started
      elasticsearch:
        condition: service_started
      minio:
        condition: service_started
    environment:
      DB_USERNAME: ${POSTGRES_USER}
      DB_PASSWORD: ${POSTGRES_PASSWORD}
      MISTRALAI_API_KEY: ${MISTRALAI_API_KEY}
      MINIO_OUTER_ENDPOINT: ${MINIO_OUTER_ENDPOINT}
      MINIO_ACCESS_KEY: ${MINIO_ACCESS_KEY}
      MINIO_SECRET_KEY: ${MINIO_SECRET_KEY}
    entrypoint: >
      /bin/sh -c '
        readonly OUTPUT_DIR="/app/.secrets/keys"
        readonly PRIVATE_KEY_PATH="$${OUTPUT_DIR}/app.key"
        readonly PUBLIC_KEY_PATH="$${OUTPUT_DIR}/app.pub"
        if [ ! -f "$${PRIVATE_KEY_PATH}" ] || [ ! -f "$${PUBLIC_KEY_PATH}" ]; then
          openssl genpkey -algorithm RSA -out "$${PRIVATE_KEY_PATH}" -pkeyopt rsa_keygen_bits:2048 &> /dev/null
          openssl rsa -pubout -in "$${PRIVATE_KEY_PATH}" -out "$${PUBLIC_KEY_PATH}" &> /dev/null
          echo "RSA Keys generated successfully in $${OUTPUT_DIR}"
        fi
        exec $0 "$@"
      '
    command: java -jar app.jar --spring.profiles.active=staging
    volumes:
      - insightvault-backend-data:/app/.secrets/keys
    restart: unless-stopped
    networks:
      - insightvault-backend-postgres-net
      - insightvault-backend-elasticsearch-net
      - insightvault-backend-minio-net

  postgres:
    image: postgres:17
    container_name: insightvault-postgres
    ports:
      - "5432:5432"
    environment:
      POSTGRES_DB: insightvault
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
    volumes:
      - insightvault-postgres-data:/var/lib/postgresql/data
    restart: unless-stopped
    networks:
      - insightvault-backend-postgres-net

  elasticsearch:
    image: elasticsearch:9.0.3
    container_name: insightvault-elasticsearch
    ports:
      - "9200:9200"
      - "9300:9300"
    environment:
      discovery.type: single-node
      xpack.security.enabled: false
    volumes:
      - insightvault-elasticsearch-data:/usr/share/elasticsearch/data
    restart: unless-stopped
    networks:
      - insightvault-backend-elasticsearch-net

  minio:
    image: minio/minio:RELEASE.2025-06-13T11-33-47Z
    container_name: insightvault-minio
    ports:
      - "9000:9000"
      - "9001:9001"
    environment:
      MINIO_ROOT_USER: ${MINIO_ACCESS_KEY}
      MINIO_ROOT_PASSWORD: ${MINIO_SECRET_KEY}
    entrypoint: >
      /bin/sh -c '
        isAlive() { curl -sf http://minio:9000/minio/health/live; }
        minio $0 "$@" --quiet & echo $! > /tmp/minio.pid
        until isAlive; do sleep 1; done
        echo "MinIO is ready. Proceeding with setup..."
        mc alias set myminio http://minio:9000 ${MINIO_ACCESS_KEY} ${MINIO_SECRET_KEY}
        mc mb myminio/${MINIO_BUCKET} --ignore-existing
        mc anonymous set public myminio/${MINIO_BUCKET}
        kill -s INT $(cat /tmp/minio.pid) && rm /tmp/minio.pid
        while isAlive; do sleep 0.1; done
        exec minio $0 "$@"
      '
    command: server /data --console-address ":9001"
    volumes:
      - insightvault-minio-data:/data
    restart: unless-stopped
    networks:
      - insightvault-backend-minio-net

volumes:
  insightvault-backend-data:
  insightvault-postgres-data:
  insightvault-elasticsearch-data:
  insightvault-minio-data:

networks:
  insightvault-backend-postgres-net:
  insightvault-backend-elasticsearch-net:
  insightvault-backend-minio-net:
